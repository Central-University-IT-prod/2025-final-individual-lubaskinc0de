# code-generated by datamodel-code-generator

from __future__ import annotations

from enum import Enum
from uuid import UUID

from pydantic import BaseModel, Field


class ClientGenderModel(Enum):
    MALE = "MALE"
    FEMALE = "FEMALE"


class ClientModel(BaseModel):
    client_id: UUID = Field(
        ...,
        description="Уникальный идентификатор клиента (UUID).",
    )
    login: str = Field(..., description="Логин клиента в системе.")
    age: int = Field(..., description="Возраст клиента.")
    location: str = Field(
        ...,
        description="Локация клиента (город, регион или район).",
    )
    gender: ClientGenderModel = Field(
        ...,
        description="Пол клиента (MALE или FEMALE).",
    )


class AdvertiserModel(BaseModel):
    advertiser_id: UUID = Field(
        ...,
        description="Уникальный идентификатор рекламодателя (UUID).",
    )
    name: str = Field(..., description="Название рекламодателя.")


class RelevanceModel(BaseModel):
    client_id: UUID = Field(
        ...,
        description="UUID клиента для которого рассчитывается ML скор.",
    )
    advertiser_id: UUID = Field(
        ...,
        description="UUID рекламодателя для которого рассчитывается ML скор.",
    )
    score: int = Field(
        ...,
        description="Целочисленное значение ML скора; чем больше – тем выше релевантност",
    )


class TargetingGenderModel(Enum):
    MALE = "MALE"
    FEMALE = "FEMALE"
    ALL = "ALL"


class TargetingModel(BaseModel):
    gender: TargetingGenderModel | None = Field(
        None,
        description="Пол аудитории для показа объявления (MALE, FEMALE или ALL).",
    )
    age_from: int | None = Field(
        None,
        description="Минимальный возраст аудитории (включительно) для показа объявления.",
    )
    age_to: int | None = Field(
        None,
        description="Максимальный возраст аудитории (включительно) для показа объявления",
    )
    location: str | None = Field(
        None,
        description="Локация аудитории, для которой будет показано объявление.",
    )


class AdModel(BaseModel):
    ad_id: UUID = Field(
        ...,
        description="Уникальный идентификатор рекламного объявления (всегда совпада\
            ет с id рекламной кампании).",
    )
    ad_title: str = Field(..., description="Название рекламного объявления.")
    ad_text: str = Field(
        ...,
        description="Текст рекламного объявления, который видит клиент.",
    )
    advertiser_id: UUID = Field(
        ...,
        description="UUID рекламодателя, которому принадлежит объявление.",
    )


class StatsModel(BaseModel):
    impressions_count: int = Field(
        ...,
        description="Общее количество уникальных показов рекламного объявления.",
    )
    clicks_count: int = Field(
        ...,
        description="Общее количество уникальных переходов (кликов) по рекламно\
            му объявлению.",
    )
    conversion: float = Field(
        ...,
        description="Коэффициент конверсии, вычисляемый как (clicks_count / impressions\
            _count * 100) в процентах.",
    )
    spent_impressions: float = Field(
        ...,
        description="Сумма денег, потраченная на показы рекламного объявления.",
    )
    spent_clicks: float = Field(
        ...,
        description="Сумма денег, потраченная на переходы (клики) по рекламному объяв\
            лению.",
    )
    spent_total: float = Field(
        ...,
        description="Общая сумма денег, потраченная на кампанию (показы и клики).",
    )


class DailyStatsModel(StatsModel):
    date: int = Field(
        ...,
        description="День, за который была собрана статистика.",
    )


class ClientUpsertModel(BaseModel):
    client_id: UUID
    login: str
    age: int
    location: str
    gender: ClientGenderModel


class AdvertiserUpsertModel(BaseModel):
    advertiser_id: UUID = Field(..., description="UUID рекламодателя.")
    name: str


class CampaignModel(BaseModel):
    campaign_id: UUID = Field(
        ...,
        description="Уникальный идентификатор рекламной кампании (UUID).",
    )
    advertiser_id: UUID = Field(
        ...,
        description="UUID рекламодателя, которому принадлежит кампания.",
    )
    impressions_limit: int = Field(
        ...,
        description="Лимит показов рекламного объявления (фиксируется до старта \
            кампании).",
    )
    clicks_limit: int = Field(
        ...,
        description="Лимит переходов (кликов) по рекламному объявлению \
            (фиксируется до старта кампании).",
    )
    cost_per_impression: float = Field(
        ...,
        description="Стоимость одного показа рекламного объявления.",
    )
    cost_per_click: float = Field(
        ...,
        description="Стоимость одного перехода (клика) по рекламному объявлению.",
    )
    ad_title: str = Field(..., description="Название рекламного объявления.")
    ad_text: str = Field(..., description="Текст рекламного объявления.")
    start_date: int = Field(
        ...,
        description="День старта показа рекламного объявления (включительно).",
    )
    end_date: int = Field(
        ...,
        description="День окончания показа рекламного объявления (включительно).",
    )
    targeting: TargetingModel
    image_path: str | None = None


class ImageAttachResponseModel(BaseModel):
    campaign_id: UUID
    path: str


class CampaignCreateModel(BaseModel):
    impressions_limit: int = Field(
        ...,
        description="Задаёт лимит показов для рекламного объявления.",
    )
    clicks_limit: int = Field(
        ...,
        description="Задаёт лимит переходов для рекламного объявления.",
    )
    cost_per_impression: float = Field(
        ...,
        description="Стоимость одного показа объявления.",
    )
    cost_per_click: float = Field(
        ...,
        description="Стоимость одного перехода (клика) по объявлению.",
    )
    ad_title: str = Field(..., description="Название рекламного объявления.")
    ad_text: str = Field(..., description="Текст рекламного объявления.")
    start_date: int = Field(
        ...,
        description="День начала показа рекламного объявления (включительно).",
    )
    end_date: int = Field(
        ...,
        description="День окончания показа рекламного объявления (включительно).",
    )
    targeting: TargetingModel | None = None


class CampaignUpdateModel(BaseModel):
    impressions_limit: int = Field(
        ...,
        description="Задаёт лимит показов для рекламного объявления.",
    )
    clicks_limit: int = Field(
        ...,
        description="Задаёт лимит переходов для рекламного объявления.",
    )
    cost_per_impression: float | None = Field(
        None,
        description="Новая стоимость одного показа объявления.",
    )
    cost_per_click: float | None = Field(
        None,
        description="Новая стоимость одного перехода (клика) по объявлению.",
    )
    ad_title: str | None = Field(
        None,
        description="Новое название рекламного объявления.",
    )
    ad_text: str | None = Field(
        None,
        description="Новый текст рекламного объявления.",
    )
    start_date: int = Field(
        ...,
        description="День начала показа рекламного объявления (включительно).",
    )
    end_date: int = Field(
        ...,
        description="День окончания показа рекламного объявления (включительно).",
    )
    targeting: TargetingModel | None = Field(
        None,
        description="Новые параметры таргетирования для рекламной кампании.",
    )
